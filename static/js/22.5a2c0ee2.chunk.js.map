{"version":3,"sources":["../../../src/icons/SearchIcon.js","../../src/ReactSearchAutocomplete.js","../node_modules/fuse.js/dist/fuse.esm.js","../../../src/defaults/defaults.js","../../../src/Results/Results.js","../../../src/Results/StyledResults.js","../../src/StyledReactSearchAutocomplete.js","../../../src/SearchInput/SearchInput.js","../../../src/SearchInput/StyledSearchInput.js","../../../src/utils/utils.js"],"names":["props","width","height","focusable","xmlns","viewBox","d","ReactSearchAutocomplete","items","fuseOptions","useCaching","inputDebounce","onSearch","onSelect","onFocus","showIcon","maxResults","placeholder","autoFocus","styling","theme","defaultTheme","options","defaultFuseOptions","React","searchString","setSearchString","results","setResults","sessionStorage","keyword","newResults","Fuse","id","result","name","JSON","debounceOnSearch","debounce","className","event","isCached","onBlur","onClick","PropTypes","object","isArray","value","Array","getTag","isString","isNumber","isBoolean","isObject","isObjectLike","isDefined","undefined","isBlank","trim","length","Object","prototype","toString","call","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","hasOwn","hasOwnProperty","KeyStore","keys","this","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","keyId","stringify","path","src","createKeyPath","createKeyId","Error","MISSING_KEY_PROPERTY","INVALID_KEY_WEIGHT_VALUE","split","join","AdvancedOptions","useExtendedSearch","getFn","list","arr","deepGet","index","baseToString","i","len","ignoreLocation","ignoreFieldNorm","Config","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","includeMatches","findAllMatches","minMatchCharLength","location","threshold","distance","SPACE","norm","mantissa","cache","Map","m","Math","pow","get","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","createPatternAlphabet","mask","char","charAt","BitapSearch","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","text","isMatch","allIndices","totalScore","hasMatches","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","binMin","binMid","floor","finish","bitArr","j","charMatch","search","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","parseQuery","query","filter","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","constructor","_","registeredSearchers","createSearcher","searcherClass","condition","LogicalOperator","KeyType","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore$1","Number","EPSILON","transformMatches","data","refIndex","transformScore","format","transformers","transformer","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","resultMap","expResults","evaluate","_findMatches","getValueForItemAtKeyId","res","version","parseIndex","config","register","border","borderRadius","backgroundColor","boxShadow","hoverBackgroundColor","color","fontSize","fontFamily","iconColor","lineColor","placeholderColor","GlobalStyle","createGlobalStyle","maxPatternLength","Results","handleClick","onMouseDown","title","number","StyledResults","styled","StyledReactSearchAutocomplete","parseInt","SearchInput","spellCheck","onChange","bool","StyledSearchInput","func","wait","immediate","context","args","later","timeout","clearTimeout","setTimeout","cachedValues"],"mappings":"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","file":"static/js/22.5a2c0ee2.chunk.js","sourcesContent":["import React from 'react'\n\nconst SearchIcon = (props) => (\n  <svg\n    width={20}\n    height={20}\n    focusable=\"false\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    viewBox=\"0 0 24 24\"\n  >\n    <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"></path>\n  </svg>\n)\n\nexport { SearchIcon }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Fuse from 'fuse.js'\nimport { defaultTheme, GlobalStyle, defaultFuseOptions } from './defaults/defaults'\nimport Results from './Results/Results'\nimport { StyledReactSearchAutocomplete } from './StyledReactSearchAutocomplete'\nimport SearchInput from './SearchInput/SearchInput'\nimport { ThemeProvider } from 'styled-components'\nimport { debounce, isCached } from './utils/utils'\n\nexport default function ReactSearchAutocomplete(props) {\n  const {\n    items,\n    fuseOptions,\n    useCaching,\n    inputDebounce,\n    onSearch,\n    onSelect,\n    onFocus,\n    showIcon,\n    maxResults,\n    placeholder,\n    autoFocus,\n    styling\n  } = props\n\n  const theme = { ...defaultTheme, ...styling }\n  const options = { ...defaultFuseOptions, ...fuseOptions }\n\n  const [searchString, setSearchString] = React.useState('')\n  const [results, setResults] = React.useState()\n\n  React.useEffect(() => {\n    if (useCaching) sessionStorage.clear()\n  }, [items])\n\n  React.useEffect(() => {\n    const keyword = searchString?.toLowerCase()\n\n    if (keyword?.length > 0) {\n      const fuse = new Fuse(items, options)\n      const newResults = fuse\n        .search(searchString)\n        .map((result) => ({ id: result.item.id, name: result.item.name }))\n\n      if (useCaching) {\n        if (keyword in sessionStorage) {\n          setResults(JSON.parse(sessionStorage.getItem(keyword)))\n        } else {\n          sessionStorage.setItem(keyword, JSON.stringify(newResults))\n          setResults(newResults)\n        }\n      } else {\n        setResults(newResults)\n      }\n    } else {\n      setResults([])\n    }\n  }, [searchString, items, useCaching])\n\n  // This is used to debounce the onSearch props function\n  const debounceOnSearch = React.useCallback(\n    inputDebounce > 0\n      ? debounce((keyword, cached) => onSearch(keyword, cached), inputDebounce)\n      : (keyword, cached) => onSearch(keyword, cached),\n    []\n  )\n\n  const handleSetSearchString = (event) => {\n    setSearchString(event.target.value)\n    const keyword = event.target.value.toLowerCase()\n    if (useCaching) {\n      onSearch && debounceOnSearch(event.target.value, isCached(keyword))\n    } else {\n      onSearch && debounceOnSearch(event.target.value, false)\n    }\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyle />\n      <StyledReactSearchAutocomplete>\n        <div className=\"wrapper\">\n          <SearchInput\n            searchString={searchString}\n            setSearchString={handleSetSearchString}\n            autoFocus={autoFocus}\n            onBlur={() => setResults([])}\n            onFocus={onFocus}\n            placeholder={placeholder}\n            showIcon={showIcon}\n          />\n          <Results\n            results={results}\n            onClick={onSelect}\n            setSearchString={setSearchString}\n            showIcon={showIcon}\n            maxResults={maxResults}\n          />\n        </div>\n      </StyledReactSearchAutocomplete>\n    </ThemeProvider>\n  )\n}\n\nReactSearchAutocomplete.defaultProps = {\n  items: [],\n  fuseOptions: defaultFuseOptions,\n  useCaching: true,\n  inputDebounce: 200,\n  showIcon: true,\n  maxResults: 10,\n  placeholder: '',\n  autoFocus: false,\n  styling: {}\n}\n\nReactSearchAutocomplete.propTypes = {\n  items: PropTypes.array,\n  fuseOptions: PropTypes.object,\n  useCaching: PropTypes.bool,\n  inputDebounce: PropTypes.number,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onFocus: PropTypes.func,\n  showIcon: PropTypes.bool,\n  maxResults: PropTypes.number,\n  placeholder: PropTypes.string,\n  autoFocus: PropTypes.bool,\n  styling: PropTypes.object\n}\n","/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n","import { createGlobalStyle } from 'styled-components'\n\nconst defaultTheme = {\n  height: '44px',\n  border: '1px solid #dfe1e5',\n  borderRadius: '24px',\n  backgroundColor: 'white',\n  boxShadow: 'rgba(32, 33, 36, 0.28) 0px 1px 6px 0px',\n  hoverBackgroundColor: '#eee',\n  color: '#212121',\n  fontSize: '16px',\n  fontFamily: 'Arial',\n  iconColor: 'grey',\n  lineColor: 'rgb(232, 234, 237)',\n  placeholderColor: 'grey'\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    box-sizing: border-box;\n    font-family: ${(props) => props.theme.fontFamily};\n    font-size: ${(props) => props.theme.fontSize};\n  }\n`\n\nconst defaultFuseOptions = {\n  shouldSort: true,\n  threshold: 0.6,\n  location: 0,\n  distance: 100,\n  maxPatternLength: 32,\n  minMatchCharLength: 1,\n  keys: ['name']\n}\n\nexport { defaultTheme, GlobalStyle, defaultFuseOptions }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { SearchIcon } from '../icons/SearchIcon'\nimport { StyledResults } from './StyledResults'\nexport default function Results(props) {\n  const { results, onClick, setSearchString, showIcon, maxResults } = props\n\n  const handleClick = (result) => {\n    onClick(result)\n    setSearchString(result.name)\n  }\n\n  if (results.length <= 0) {\n    return null\n  }\n\n  return (\n    <StyledResults>\n      <div className=\"line\" />\n      <ul>\n        {results.slice(0, maxResults).map((result) => {\n          return (\n            <li\n              key={`rsa-result-${result.id}`}\n              onMouseDown={() => handleClick(result)}\n              onClick={() => handleClick(result)}\n            >\n              {showIcon && (\n                <div className=\"icon\">\n                  <SearchIcon />\n                </div>\n              )}\n              <div className=\"ellipsis\" title={result.name}>\n                {result.name}\n              </div>\n            </li>\n          )\n        })}\n      </ul>\n    </StyledResults>\n  )\n}\n\nResults.defaultProps = {\n  results: [],\n  setSearchString: () => {}\n}\n\nResults.propTypes = {\n  results: PropTypes.array,\n  onClick: PropTypes.func,\n  setSearchString: PropTypes.func,\n  showIcon: PropTypes.bool,\n  maxResults: PropTypes.number\n}\n","import styled from 'styled-components'\n\nconst StyledResults = styled.div`\n  > div.line {\n    border-top-color: ${(props) => props.theme.lineColor};\n    border-top-style: solid;\n    border-top-width: 1px;\n\n    margin-bottom: 0px;\n    margin-left: 14px;\n    margin-right: 20px;\n    margin-top: 0px;\n\n    padding-bottom: 4px;\n  }\n\n  > ul {\n    list-style-type: none;\n    margin: 0;\n    padding: 0px 0 16px 0;\n    max-height: ${(props) => props.theme.maxHeight};\n\n    > li {\n      display: flex;\n      align-items: center;\n      padding: 4px 0 4px 0;\n\n      &:hover {\n        background-color: ${(props) => props.theme.hoverBackgroundColor};\n        cursor: default;\n      }\n\n      > .icon {\n        margin-left: 16px;\n\n        > svg {\n          fill: ${(props) => props.theme.iconColor};\n        }\n      }\n\n      > div {\n        margin-left: 13px;\n      }\n    }\n  }\n  .ellipsis {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n`\n\nexport { StyledResults }\n","import styled from 'styled-components'\n\nconst StyledReactSearchAutocomplete = styled.div`\n  position: relative;\n\n  height: ${(props) => parseInt(props.theme.height) + 2 + 'px'};\n\n  > .wrapper {\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n\n    border: ${(props) => props.theme.border};\n    border-radius: ${(props) => props.theme.borderRadius};\n\n    background-color: ${(props) => props.theme.backgroundColor};\n    color: ${(props) => props.theme.color};\n\n    font-size: ${(props) => props.theme.fontSize};\n\n    &:hover {\n      box-shadow: ${(props) => props.theme.boxShadow};\n    }\n    &:active {\n      box-shadow: ${(props) => props.theme.boxShadow};\n    }\n    &:focus-within {\n      box-shadow: ${(props) => props.theme.boxShadow};\n    }\n  }\n`\n\nexport { StyledReactSearchAutocomplete }\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StyledSearchInput } from './StyledSearchInput'\nimport { SearchIcon } from './../icons/SearchIcon'\n\nexport default function SearchInput(props) {\n  const { searchString, setSearchString, autoFocus, onBlur, onFocus, placeholder, showIcon } = props\n\n  return (\n    <StyledSearchInput>\n      {showIcon && <SearchIcon />}\n      <input\n        spellCheck={false}\n        value={searchString}\n        onChange={setSearchString}\n        onBlur={onBlur}\n        onFocus={onFocus}\n        placeholder={placeholder}\n        autoFocus={autoFocus}\n      />\n    </StyledSearchInput>\n  )\n}\n\nSearchInput.defaultProps = {\n  showIcon: true\n}\n\nSearchInput.propTypes = {\n  searchString: PropTypes.string.isRequired,\n  setSearchString: PropTypes.func.isRequired,\n  autoFocus: PropTypes.bool,\n  onBlur: PropTypes.func.isRequired,\n  onFocus: PropTypes.func,\n  placeholder: PropTypes.string,\n  showIcon: PropTypes.bool\n}\n","import styled from 'styled-components'\n\nconst StyledSearchInput = styled.div`\n  min-height: ${(props) => props.theme.height};\n  width: 100%;\n\n  display: flex;\n  align-items: center;\n\n  > input {\n    width: 100%;\n\n    padding: 0 0 0 13px;\n\n    border: none;\n    outline: none;\n\n    background-color: rgba(0, 0, 0, 0);\n\n    color: ${(props) => props.theme.color};\n  }\n\n  > svg {\n    flex-shrink: 0;\n    margin-left: 16px;\n    fill: ${(props) => props.theme.iconColor};\n  }\n`\n\nexport { StyledSearchInput }\n","export function debounce(func, wait, immediate) {\n  var timeout\n  return function () {\n    var context = this,\n      args = arguments\n    var later = function () {\n      timeout = null\n      if (!immediate) func.apply(context, args)\n    }\n    if (immediate && !timeout) func.apply(context, args)\n    clearTimeout(timeout)\n    timeout = setTimeout(later, wait)\n  }\n}\n\n/**\n * This function will return the cachedValues if they exist or false if not\n *\n * @param {string} keyword The string the user is searching\n */\n\nexport const isCached = (keyword) => {\n  keyword = keyword.toLowerCase()\n  const cachedValues = JSON.parse(sessionStorage.getItem(keyword.toLowerCase()))\n  if (cachedValues) return cachedValues\n  return false\n}\n"],"sourceRoot":""}